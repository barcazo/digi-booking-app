# Stage 1: Build the frontend
# Use Docker format for compatibility with HEALTHCHECK
FROM docker.io/node:20-alpine AS build

# Set working directory
WORKDIR /app

# Copy package.json and package-lock.json
COPY package.json package-lock.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci

# Copy the frontend source code
COPY tsconfig.json webpack.config.js jest.config.js jest.setup.tsx ./
COPY src/main/webapp ./src/main/webapp

# Build the frontend
RUN npm run build

# Stage 2: Serve the frontend
# Use Docker format for compatibility with HEALTHCHECK
FROM docker.io/nginx:alpine

# Install wget for health check
RUN apk add --no-cache wget

# Copy the built frontend from the build stage
COPY --from=build /app/target/classes/static /usr/share/nginx/html

# Copy nginx configuration
COPY nginx/nginx.conf /etc/nginx/nginx.conf

# Expose port 3000
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
  CMD wget -q -O - http://localhost:3000 || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
