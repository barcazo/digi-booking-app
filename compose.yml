version: '3.8'

services:
  # Database
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports: ["5433:5432"]
    volumes: [postgres-data:/var/lib/postgresql/data]
    networks: [internal]

  # Keycloak
  keycloak:
    image: quay.io/keycloak/keycloak:26.0.6
    command: ["start-dev", "--import-realm"]
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_USER}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      KC_DB_USERNAME: ${POSTGRES_USER}
      KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    ports: ["8085:8080"]
    networks: [internal]
    depends_on: [postgres]
    volumes:
      - ./src/test/resources/keycloak-realm.json:/opt/keycloak/data/import/realm.json

  # Backend API
  backend:
    image: digi-booking-app_backend
    build: { context: ., dockerfile: ./Containerfile }
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
    ports: ["8080:8080"]
    networks: [internal]
    depends_on: [postgres]

  # Frontend
  frontend:
    image: digi-booking-app_frontend
    build: 
      context: .
      dockerfile: ./frontend/Containerfile
      args:
        API_PATH: http://localhost:8080
    environment:
      KEYCLOAK_URL: http://host.containers.internal:8085
      KEYCLOAK_REALM: ${KEYCLOAK_REALM}
      KEYCLOAK_CLIENT_ID: ${KEYCLOAK_CLIENT_ID}
    ports: ["${FRONTEND_PORT}:3000"]
    networks: [internal]
    depends_on: [backend]
    extra_hosts:
      - "host.containers.internal:host-gateway"

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports: ["9090:9090"]
    volumes: [./prometheus.yml:/etc/prometheus/prometheus.yml]
    networks: [internal]
    command: [
      '--config.file=/etc/prometheus/prometheus.yml',
      '--storage.tsdb.path=/prometheus',
      '--web.enable-lifecycle'
    ]

  grafana:
    image: grafana/grafana:latest
    ports: ["3001:3000"]
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes: [grafana-data:/var/lib/grafana]
    networks: [internal]
    depends_on: [prometheus]

volumes:
  postgres-data:
  grafana-data:

networks:
  internal:
    driver: bridge
