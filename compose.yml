version: '3.8'

services:
  postgres:
    image: docker.io/postgres:17.6
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - 5433:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: docker.io/quay.io/keycloak/keycloak:26.0.6
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KEYCLOAK_USER}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KEYCLOAK_PASSWORD}
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./src/test/resources/keycloak-realm.json:/opt/keycloak/data/import/keycloak-realm.json
    ports:
      - 8085:8080
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  booking-service:
    build:
      context: .
      dockerfile: Containerfile
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      SPRING_DATASOURCE_USERNAME: ${POSTGRES_USER}
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD}
    expose:
      - 8080
    networks:
      - internal
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  user-service:
    build:
      context: .
      dockerfile: Containerfile
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
    expose:
      - 8081
    networks:
      - internal

  catalog-service:
    build:
      context: .
      dockerfile: Containerfile
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
    expose:
      - 8082
    networks:
      - internal

  gateway-service:
    build:
      context: .
      dockerfile: Containerfile
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILE}
    expose:
      - 8083
    networks:
      - internal
    depends_on:
      - booking-service
      - user-service
      - catalog-service
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  frontend:
    build:
      context: .
      dockerfile: ./frontend/Containerfile
    ports:
      - "${FRONTEND_PORT}:3000"
    networks:
      - internal
    env_file:
      - ./frontend/.env

  nginx:
    image: docker.io/nginx:latest
    ports:
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - gateway-service
    networks:
      - internal

  prometheus:
    image: docker.io/prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - internal
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9090/-/healthy || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  grafana:
    image: docker.io/grafana/grafana:latest
    ports:
      - 3000:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - internal
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  grafana-data:
  postgres-data:

networks:
  internal:
    driver: bridge
